version: "3.8"

services:
    nginx:
        image: nginx:alpine
        restart: always
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./services/nginx/conf.d/prod_nginx.conf:/etc/nginx/conf.d/default.conf
            - ./data/certbot/conf:/etc/letsencrypt:ro
            - ./data/certbot/www:/var/www/certbot
            - ./apps/frontend/dist:/usr/share/nginx/html:ro
        networks:
            - frontend
        depends_on:
            backend:
                condition: service_healthy
            websocket:
                condition: service_healthy

    backend:
        build:
            context: .
            dockerfile: ./services/backend/Dockerfile.prod
        image: backend:latest
        env_file:
            - .env.prod
        volumes:
            - .env.prod:/app/.env
        expose:
            - "3000"
        networks:
            - frontend
            - backend
        depends_on:
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    websocket:
        build:
            context: .
            dockerfile: ./services/websocket/Dockerfile.prod
        image: websocket:latest
        env_file:
            - .env.prod
        volumes:
            - .env.prod:/app/apps/websocket/.env
        expose:
            - "4242"
        networks:
            - frontend
            - backend
        depends_on:
            backend:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4242/health"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    redis:
        image: redis:latest
        environment:
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
        networks:
            - backend
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            retries: 3
            start_period: 10s
            timeout: 5s

    certbot-renewer:
        image: certbot/certbot:latest
        volumes:
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot
            - ./data/certbot/log:/var/log/letsencrypt
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot; sleep 12h & wait $${!}; done;'"

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge
