version: "3.8"

services:
  nginx:
    image: growth123/octodocs-nginx:latest
    env_file:
      - .env.server
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot
    networks:
      - frontend
    depends_on:
      backend:
        condition: service_healthy
      websocket:
        condition: service_healthy

  backend:
    image: growth123/octodocs-backend:latest
    env_file:
      - .env.server
    expose:
      - "3000"
    networks:
      - frontend
      - backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  websocket:
    image: growth123/octodocs-websocket:latest
    env_file:
      - .env.server
    expose:
      - "4242"
    networks:
      - frontend
      - backend
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4242/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  redis:
    image: redis:latest
    env_file:
      - .env.server
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    restart: always

  certbot-renewer:
    image: certbot/certbot:latest
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/log:/var/log/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot; sleep 12h & wait $${!}; done;'"
    restart: always

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
