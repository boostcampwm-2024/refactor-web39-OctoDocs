server {
    listen 80;
    server_name octodocs.site www.octodocs.site;

    # Certbot 인증용 경로 (최상단에 위치)
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
        break;
    }

    # 나머지 모든 HTTP 트래픽은 HTTPS로 리다이렉트
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name octodocs.site www.octodocs.site;

    # Let's Encrypt 인증서 경로
    ssl_certificate /etc/letsencrypt/live/octodocs.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/octodocs.site/privkey.pem;
    
    # SSL 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # 인증서가 없을 때 fallback
    ssl_trusted_certificate /etc/letsencrypt/live/octodocs.site/chain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # 에러 페이지 설정
    error_page 497 https://$server_name$request_uri;
    
    # gzip 압축 설정
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 프론트엔드 정적 파일
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        expires 30d;
    }

    # API 프록시
    location /api {
        proxy_pass http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Socket.IO 프록시 (일반 웹소켓)
    location /socket.io {
        proxy_pass http://websocket:4242;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }

    # Y-Socket.IO 프록시 (YJS 웹소켓)
    location /flow-room {
        proxy_pass http://websocket:4242;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}
